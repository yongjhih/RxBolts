buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'
        classpath 'me.tatarka:gradle-retrolambda:2.5.0'
        classpath 'com.novoda:bintray-release:0.3.4'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'

retrolambda {
    jdk System.getenv("JAVA8_HOME")
    oldJdk System.getenv("JAVA7_HOME")
    javaVersion JavaVersion.VERSION_1_7
}

repositories {
    jcenter()
    maven { url "https://jitpack.io" }
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 22

        consumerProguardFiles fileTree(dir: '.', include: '*.pro')
    }

    buildTypes {
        debug {
            testCoverageEnabled true // Instrumentation
        }
    }
}

dependencies {
    compile 'io.reactivex:rxjava:1.0.7'

    compile 'com.parse.bolts:bolts-tasks:1.4.0'
    compile 'com.parse.bolts:bolts-applinks:1.4.0'
    compile project(':rxbolts-tasks')

    testCompile 'junit:junit:4.12'
    //testCompile 'org.robolectric:robolectric:3.0'
    testCompile 'org.robolectric:robolectric:3.1-rc1'
    //testCompile 'org.robolectric:robolectric:3.1-SNAPSHOT'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'com.squareup.okhttp:mockwebserver:2.4.0'
    testCompile 'io.reactivex:rxandroid:0.24.0'
    //testCompile 'com.github.ubiratansoares:rxassertions:0.2.0'
    testCompile 'com.github.yongjhih:rxassertions:0.2.4'
    testCompile 'com.github.yongjhih:mocker:0.1.2'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

apply plugin: 'com.novoda.bintray-release'

def getRepositoryUsername() {
    return hasProperty('BINTRAY_USER') ? BINTRAY_USER : ""
}

def getRepositoryPassword() {
    return hasProperty('BINTRAY_KEY') ? BINTRAY_KEY : ""
}

publish {
    userOrg = 'yongjhih'
    groupId = 'com.infstory'
    artifactId = 'rxbolts-applinks'
    publishVersion = '1.0.3'
    desc = 'Reactive Bolts-Android.'
    website = 'https://github.com/yongjhih/RxBolts'
    bintrayUser = getRepositoryUsername()
    bintrayKey = getRepositoryPassword()
    dryRun = false
}

apply plugin: 'com.github.dcendents.android-maven'
apply from: 'javadoc.gradle'
apply from: 'jacoco-coveralls.gradle'

tasks.withType(Test) {
  testLogging {
    exceptionFormat "full"
    events "passed", "skipped", "failed", "standardOut", "standardError"
    showStandardStreams = true
  }
}
