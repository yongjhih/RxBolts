buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:2.5.0'
        classpath 'com.novoda:bintray-release:0.3.4'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
    }
}

apply plugin: 'java'
apply plugin: 'me.tatarka.retrolambda'

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

retrolambda {
    // ```bash
    // export JAVA8_HOME="/usr/lib/jvm/java-8-oracle"
    // export JAVA7_HOME="/usr/lib/jvm/java-7-oracle"
    // export JAVA_HOME="$JAVA8_HOME"
    // ```
    //jvmArgs '-noverify'
    jdk System.getenv("JAVA8_HOME")
    //oldJdk System.getenv("JAVA_HOME")
    oldJdk System.getenv("JAVA7_HOME")
    javaVersion JavaVersion.VERSION_1_7
}

repositories {
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    compile 'io.reactivex:rxjava:1.0.7'

    compile 'com.parse.bolts:bolts-tasks:1.4.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'com.squareup.okhttp:mockwebserver:2.4.0'
    //testCompile 'com.github.ubiratansoares:rxassertions:0.2.0'
    testCompile 'com.github.yongjhih:rxassertions:0.2.4'
    testCompile 'com.github.yongjhih:mocker:0.1.2'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

apply plugin: 'com.novoda.bintray-release'

def getRepositoryUsername() {
    return hasProperty('BINTRAY_USER') ? BINTRAY_USER : ""
}

def getRepositoryPassword() {
    return hasProperty('BINTRAY_KEY') ? BINTRAY_KEY : ""
}

publish {
    userOrg = 'yongjhih'
    groupId = 'com.infstory'
    artifactId = 'rxbolts-tasks'
    publishVersion = '1.0.2'
    desc = 'Reactive Bolts.'
    website = 'https://github.com/yongjhih/RxBolts'
    bintrayUser = getRepositoryUsername()
    bintrayKey = getRepositoryPassword()
    dryRun = false
}

apply plugin: 'maven'
apply from: 'javadoc.gradle'

apply plugin: 'jacoco'

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

apply plugin: 'com.github.kt3k.coveralls'

coveralls {
    jacocoReportPath "$buildDir/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
}

tasks.coveralls {
    dependsOn 'jacocoTestReport'
}

tasks.jacocoTestReport {
    dependsOn 'test'
}

tasks.withType(Test) {
  testLogging {
    exceptionFormat "full"
    events "passed", "skipped", "failed", "standardOut", "standardError"
    showStandardStreams = true
  }
}
